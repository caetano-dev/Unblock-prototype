import Foundation

let tasksMock: [TaskType] = [
    TaskType(id: 1, name: "Meeting with Team", description: "Discuss project updates", date: Date(), durationInMinutes: 60, completed: false, createdAt: Date(), isHabit: false, location: "Conference Room A", attendees: ["John", "Jane"], reminders: [Date().addingTimeInterval(-3600)], recurrence: "Weekly", colorCategory: "Work", notes: "Prepare presentation in advance", priority: 2, url: URL(string: "https://example.com/meeting"), endDate: Date().addingTimeInterval(3600), isAllDay: false, organizer: "John", status: "Confirmed", tags: ["Project", "Meeting"]),
    
    TaskType(id: 2, name: "Gym Workout", description: "Chest and arms", date: Date(), durationInMinutes: 90, completed: false, createdAt: Date(), isHabit: true, location: "Local Gym", attendees: nil, reminders: [Date().addingTimeInterval(-7200)], recurrence: "Daily", colorCategory: "Health", notes: "Don't forget to hydrate", priority: 1, url: nil, endDate: nil, isAllDay: false, organizer: "Self", status: "Confirmed", tags: ["Exercise"]),
    
    TaskType(id: 3, name: "Birthday Party", description: "Celebrate Sarah's birthday", date: Date(), durationInMinutes: 180, completed: false, createdAt: Date(), isHabit: false, location: "Sarah's Place", attendees: ["Sarah", "Mike", "Lisa"], reminders: [Date().addingTimeInterval(-86400)], recurrence: "Yearly", colorCategory: "Social", notes: "Bring a gift", priority: 3, url: nil, endDate: Date().addingTimeInterval(7200), isAllDay: false, organizer: "Sarah", status: "Tentative", tags: ["Party"]),
    
    TaskType(id: 4, name: "Read Book", description: "Science Fiction Novel", date: Date(), durationInMinutes: 45, completed: false, createdAt: Date(), isHabit: false, location: nil, attendees: nil, reminders: [Date().addingTimeInterval(-1800)], recurrence: nil, colorCategory: "Personal", notes: "Chapter 3-5", priority: 2, url: URL(string: "https://example.com/book"), endDate: nil, isAllDay: false, organizer: "Self", status: "Confirmed", tags: ["Reading"]),
    
    TaskType(id: 5, name: "Gym Workout", description: "Chest and arms", date: Date(), durationInMinutes: 90, completed: false, createdAt: Date(), isHabit: true, location: "Local Gym", attendees: nil, reminders: [Date().addingTimeInterval(-7200)], recurrence: "Daily", colorCategory: "Health", notes: "Don't forget to hydrate", priority: 1, url: nil, endDate: nil, isAllDay: false, organizer: "Self", status: "Confirmed", tags: ["Exercise"]),
    
    TaskType(id: 6, name: "Birthday Party", description: "Celebrate Sarah's birthday", date: Date(), durationInMinutes: 180, completed: false, createdAt: Date(), isHabit: false, location: "Sarah's Place", attendees: ["Sarah", "Mike", "Lisa"], reminders: [Date().addingTimeInterval(-86400)], recurrence: "Yearly", colorCategory: "Social", notes: "Bring a gift", priority: 3, url: nil, endDate: Date().addingTimeInterval(7200), isAllDay: false, organizer: "Sarah", status: "Tentative", tags: ["Party"]),
    
    TaskType(id: 7, name: "Read Book", description: "Science Fiction Novel", date: Date(), durationInMinutes: 45, completed: false, createdAt: Date(), isHabit: false, location: nil, attendees: nil, reminders: [Date().addingTimeInterval(-1800)], recurrence: nil, colorCategory: "Personal", notes: "Chapter 3-5", priority: 2, url: URL(string: "https://example.com/book"), endDate: nil, isAllDay: false, organizer: "Self", status: "Confirmed", tags: ["Reading"]),
    TaskType(id: 8, name: "Vacation Planning", description: "Plan summer vacation", date: Date(), durationInMinutes: 120, completed: false, createdAt: Date(), isHabit: false, location: nil, attendees: ["Spouse"], reminders: [Date().addingTimeInterval(-86400)], recurrence: nil, colorCategory: "Personal", notes: "Research destinations", priority: 1, url: nil, endDate: Date().addingTimeInterval(86400), isAllDay: false, organizer: "Self", status: "Confirmed", tags: ["Travel", "Planning"])
]
